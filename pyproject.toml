[tool.poetry]
name = "asyncer"
version = "0"
description = "Asyncer, async and await, focused on developer experience."
authors = ["Sebastián Ramírez <tiangolo@gmail.com>"]
readme = "README.md"
homepage = "https://github.com/tiangolo/asyncer"
documentation = "https://asyncer.tiangolo.com"
repository = "https://github.com/tiangolo/asyncer"
license = "MIT"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Framework :: Trio",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Typing :: Typed",
]

[tool.poetry.dependencies]
python = "^3.8"
anyio = ">=3.4.0,<5.0"
typing_extensions = { version = "^4.8.0", python = "<3.10" }

[tool.poetry.dev-dependencies]
pytest = "^7.0.1"
mypy = "1.4.1"
mkdocs-material = "9.2.7"
pillow = "^9.3.0"
cairosvg = "^2.5.2"
mdx-include = "^1.4.1"
coverage = {extras = ["toml"], version = ">=6.2,<8.0"}
ruff = "^0.1.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry-version-plugin]
source = "init"

[tool.coverage.run]
parallel = true
source = [
    "docs_src",
    "tests",
    "asyncer"
]
context = '${CONTEXT}'

[tool.coverage.report]
omit = [
    "docs_src/tutorial/soonify_return/tutorial002.py",
]

[tool.isort]
profile = "black"
known_third_party = ["asyncer"]
skip_glob = [
    "asyncer/__init__.py",
    ]


[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "docs_src.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false
warn_no_return = false
