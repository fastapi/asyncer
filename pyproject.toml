[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "asyncer"
dynamic = ["version"]
description = "Asyncer, async and await, focused on developer experience."
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "Sebastián Ramírez", email = "tiangolo@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: AsyncIO",
    "Framework :: Trio",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet",
    "Typing :: Typed",
]
dependencies = [
    "anyio >=3.4.0,<5.0",
    "typing_extensions >=4.8.0; python_version < '3.10'"
]

[project.urls]
Homepage = "https://github.com/fastapi/asyncer"
Documentation = "https://asyncer.tiangolo.com"
Repository = "https://github.com/fastapi/asyncer"
Issues = "https://github.com/fastapi/asyncer/issues"
Changelog = "https://asyncer.tiangolo.com/release-notes/"

[tool.pdm]
version = { source = "file", path = "asyncer/__init__.py" }
distribution = true

[tool.pdm.build]
source-includes = [
    "tests/",
    "docs_src/",
    "requirements*.txt",
    "scripts/",
    ]

[tool.tiangolo._internal-slim-build.packages.asyncer-slim.project]
name = "asyncer-slim"

[tool.tiangolo._internal-slim-build.packages.asyncer]
# include-optional-dependencies = ["standard"]

[tool.tiangolo._internal-slim-build.packages.asyncer.project]
optional-dependencies = {}

[tool.coverage.run]
parallel = true
data_file = "coverage/.coverage"
source = [
    "docs_src",
    "tests",
    "asyncer"
]
context = '${CONTEXT}'
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
sort = "-Cover"
omit = [
    "docs_src/tutorial/soonify_return/tutorial002.py",
]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
strict = true

[[tool.mypy.overrides]]
module = "docs_src.*"
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false
warn_no_return = false

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
# "__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-third-party = ["asyncer", "anyio"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
